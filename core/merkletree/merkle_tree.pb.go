// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core/merkletree/merkle_tree.proto

package merkletree

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MerkleTree struct {
	HashList             [][]byte         `protobuf:"bytes,1,rep,name=hash_list,json=hashList,proto3" json:"hash_list,omitempty"`
	Hash2Idx             map[string]int32 `protobuf:"bytes,2,rep,name=hash2_idx,json=hash2Idx,proto3" json:"hash2_idx,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LeafNum              int32            `protobuf:"varint,3,opt,name=leaf_num,json=leafNum,proto3" json:"leaf_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MerkleTree) Reset()         { *m = MerkleTree{} }
func (m *MerkleTree) String() string { return proto.CompactTextString(m) }
func (*MerkleTree) ProtoMessage()    {}
func (*MerkleTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_cafd901455e59c2f, []int{0}
}

func (m *MerkleTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleTree.Unmarshal(m, b)
}
func (m *MerkleTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleTree.Marshal(b, m, deterministic)
}
func (m *MerkleTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleTree.Merge(m, src)
}
func (m *MerkleTree) XXX_Size() int {
	return xxx_messageInfo_MerkleTree.Size(m)
}
func (m *MerkleTree) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleTree.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleTree proto.InternalMessageInfo

func (m *MerkleTree) GetHashList() [][]byte {
	if m != nil {
		return m.HashList
	}
	return nil
}

func (m *MerkleTree) GetHash2Idx() map[string]int32 {
	if m != nil {
		return m.Hash2Idx
	}
	return nil
}

func (m *MerkleTree) GetLeafNum() int32 {
	if m != nil {
		return m.LeafNum
	}
	return 0
}

type TXRMerkleTree struct {
	Mt                   *MerkleTree       `protobuf:"bytes,1,opt,name=mt,proto3" json:"mt,omitempty"`
	Tx2Txr               map[string][]byte `protobuf:"bytes,2,rep,name=tx2_txr,json=tx2Txr,proto3" json:"tx2_txr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TXRMerkleTree) Reset()         { *m = TXRMerkleTree{} }
func (m *TXRMerkleTree) String() string { return proto.CompactTextString(m) }
func (*TXRMerkleTree) ProtoMessage()    {}
func (*TXRMerkleTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_cafd901455e59c2f, []int{1}
}

func (m *TXRMerkleTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXRMerkleTree.Unmarshal(m, b)
}
func (m *TXRMerkleTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXRMerkleTree.Marshal(b, m, deterministic)
}
func (m *TXRMerkleTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXRMerkleTree.Merge(m, src)
}
func (m *TXRMerkleTree) XXX_Size() int {
	return xxx_messageInfo_TXRMerkleTree.Size(m)
}
func (m *TXRMerkleTree) XXX_DiscardUnknown() {
	xxx_messageInfo_TXRMerkleTree.DiscardUnknown(m)
}

var xxx_messageInfo_TXRMerkleTree proto.InternalMessageInfo

func (m *TXRMerkleTree) GetMt() *MerkleTree {
	if m != nil {
		return m.Mt
	}
	return nil
}

func (m *TXRMerkleTree) GetTx2Txr() map[string][]byte {
	if m != nil {
		return m.Tx2Txr
	}
	return nil
}

func init() {
	proto.RegisterType((*MerkleTree)(nil), "merkletree.MerkleTree")
	proto.RegisterMapType((map[string]int32)(nil), "merkletree.MerkleTree.Hash2IdxEntry")
	proto.RegisterType((*TXRMerkleTree)(nil), "merkletree.TXRMerkleTree")
	proto.RegisterMapType((map[string][]byte)(nil), "merkletree.TXRMerkleTree.Tx2TxrEntry")
}

func init() { proto.RegisterFile("core/merkletree/merkle_tree.proto", fileDescriptor_cafd901455e59c2f) }

var fileDescriptor_cafd901455e59c2f = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x65, 0x13, 0xfa, 0x35, 0x6d, 0x41, 0x16, 0x91, 0x58, 0x2f, 0xb1, 0xa8, 0xe4, 0xd2, 0x44,
	0xe2, 0xc5, 0x0f, 0x10, 0x14, 0x04, 0x05, 0xf5, 0x10, 0x72, 0x10, 0x2f, 0x21, 0x6d, 0xb7, 0xed,
	0xd2, 0x6c, 0x57, 0x36, 0x13, 0xd9, 0xfe, 0x2d, 0x7f, 0x83, 0x3f, 0x4c, 0x36, 0x51, 0x9a, 0x8a,
	0xe0, 0x6d, 0xde, 0x9b, 0x79, 0x8f, 0xf7, 0x18, 0x38, 0x9c, 0x48, 0xc5, 0x02, 0xc1, 0xd4, 0x32,
	0x63, 0xa8, 0xd8, 0xcf, 0x98, 0x98, 0xd9, 0x7f, 0x53, 0x12, 0x25, 0x85, 0xcd, 0x76, 0xf8, 0x49,
	0x00, 0x9e, 0x4a, 0x18, 0x2b, 0xc6, 0xe8, 0x01, 0x74, 0x16, 0x69, 0xbe, 0x48, 0x32, 0x9e, 0xa3,
	0x43, 0x5c, 0xdb, 0xeb, 0x45, 0x6d, 0x43, 0x3c, 0xf2, 0x1c, 0xe9, 0x4d, 0xb5, 0x0c, 0x13, 0x3e,
	0xd5, 0x8e, 0xe5, 0xda, 0x5e, 0x37, 0x3c, 0xf2, 0x37, 0x5e, 0xfe, 0xc6, 0xc7, 0xbf, 0x37, 0x77,
	0x0f, 0x53, 0x7d, 0xb7, 0x42, 0xb5, 0xae, 0x2c, 0x0c, 0xa4, 0xfb, 0xd0, 0xce, 0x58, 0x3a, 0x4b,
	0x56, 0x85, 0x70, 0x6c, 0x97, 0x78, 0x8d, 0xa8, 0x65, 0xf0, 0x73, 0x21, 0x06, 0x57, 0xd0, 0xdf,
	0x52, 0xd1, 0x1d, 0xb0, 0x97, 0x6c, 0xed, 0x10, 0x97, 0x78, 0x9d, 0xc8, 0x8c, 0x74, 0x17, 0x1a,
	0xef, 0x69, 0x56, 0x30, 0xc7, 0x2a, 0xa5, 0x15, 0xb8, 0xb4, 0xce, 0xc9, 0xf0, 0x83, 0x40, 0x3f,
	0x7e, 0x89, 0x6a, 0x4d, 0x4e, 0xc0, 0x12, 0x58, 0x8a, 0xbb, 0xe1, 0xde, 0xdf, 0x29, 0x23, 0x4b,
	0x20, 0xbd, 0x86, 0x16, 0xea, 0x30, 0x41, 0xad, 0xbe, 0x2b, 0x1d, 0xd7, 0x8f, 0xb7, 0x3c, 0xfd,
	0x58, 0x87, 0xb1, 0x56, 0x55, 0xa7, 0x26, 0x96, 0x60, 0x70, 0x01, 0xdd, 0x1a, 0xfd, 0x5f, 0xe8,
	0x5e, 0x2d, 0xf4, 0x6d, 0xf8, 0x7a, 0x3a, 0xe7, 0xb8, 0x28, 0xc6, 0xfe, 0x44, 0x8a, 0x80, 0xcb,
	0x1c, 0x47, 0x72, 0x36, 0xe3, 0x13, 0x9e, 0x66, 0xc1, 0x5c, 0x8e, 0x0c, 0x11, 0xfc, 0xfa, 0xe6,
	0xb8, 0x59, 0xbe, 0xf0, 0xec, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x19, 0x97, 0x68, 0xe7, 0x01,
	0x00, 0x00,
}
